<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoujings.github.io</id>
    <title>ZhouJingS的java之旅</title>
    <updated>2020-10-20T16:06:02.538Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoujings.github.io"/>
    <link rel="self" href="https://zhoujings.github.io/atom.xml"/>
    <subtitle>学习是孤独的，但孤独是我最好的朋友。</subtitle>
    <logo>https://zhoujings.github.io/images/avatar.png</logo>
    <icon>https://zhoujings.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ZhouJingS的java之旅</rights>
    <entry>
        <title type="html"><![CDATA[Socket通信demo]]></title>
        <id>https://zhoujings.github.io/post/socket-tong-xin-demo/</id>
        <link href="https://zhoujings.github.io/post/socket-tong-xin-demo/">
        </link>
        <updated>2020-10-20T13:14:14.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">package com.zhoujs.server;

import org.springframework.boot.test.context.SpringBootTest;
import java.io.*;
import java.net.*;

/**
 * Server*
 * @author zhoujs
 * @description *
 * @create 2020/9/20 21:12
 **/


@SpringBootTest
class Server {
    private static int count;
    private static Socket socket;

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(9527);
        System.out.println(&quot;服务器已启动,等待客户连接...&quot;);
        while(true){
            socket = serverSocket.accept();
            ServerThread st = new ServerThread(socket);
            st.start();
            System.out.println(&quot;这是第&quot;+(count++)+&quot;位用户访问&quot;);
            System.out.println(&quot;此用户的IP地址为&quot;+socket.getInetAddress().getHostAddress());
        }
    }
}


class ServerThread extends Thread {

    private Socket socket = null;
    private InputStream inputStream = null;
    private InputStreamReader inputStreamReader = null;
    private BufferedReader bufferedReader = null;
    private OutputStream outputStream = null;
    private PrintStream printStream = null;
    private String a;
    private String b = &quot;Hello JAVA&quot;;

    public ServerThread(Socket socket) {
        this.socket = socket;
    }
    @Override
    public void run() {
        super.run();
        try {
            inputStream = socket.getInputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        inputStreamReader = new InputStreamReader(inputStream);
        bufferedReader = new BufferedReader(inputStreamReader);
        try {
            while((a = bufferedReader.readLine()) != null){
                System.out.println(&quot;客户端说:&quot;+a);
                socket.shutdownInput();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            outputStream = socket.getOutputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        printStream = new PrintStream(outputStream);
        try {
            printStream.write(b.getBytes());
            socket.shutdownOutput();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}




class client{

    private static String info = &quot;Hello World&quot;;
    private static String localhost;
    private static byte[] b;
    private static String a;

    public static void main(String[] args) throws UnknownHostException, IOException {
        Socket socket = new Socket(localhost, 9527);
        OutputStream outputStream = socket.getOutputStream();
        PrintStream ps = new PrintStream(outputStream);
        b = info.getBytes();
        ps.write(b);
        ps.flush();
        //千万不能忘记关闭输入输出流!!否则不会出结果!!
        socket.shutdownOutput();
        InputStream inputStream = socket.getInputStream();
        BufferedReader bf = new BufferedReader(new InputStreamReader(inputStream));
        while((a = bf.readLine()) != null){
            System.out.println(&quot;服务器说:&quot;+a);
        }
        socket.shutdownInput();
        bf.close();
        inputStream.close();
        ps.close();
        outputStream.close();
        socket.close();
    }
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HashMap]]></title>
        <id>https://zhoujings.github.io/post/hashmap/</id>
        <link href="https://zhoujings.github.io/post/hashmap/">
        </link>
        <updated>2020-10-17T15:20:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="putval方法执行过程">putVal方法执行过程</h2>
<p><img src="https://zhoujings.github.io/post-images/1602948133131.png" alt="" loading="lazy"><br>
①.判断键值对数组table[i]是否为空或为null，否则执行resize()进行扩容；</p>
<p>②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；</p>
<p>③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</p>
<p>④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</p>
<p>⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</p>
<p>⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。</p>
<h2 id="源码">源码</h2>
<pre><code class="language-java">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,
                   boolean evict) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;
    // 步骤①：tab为空则创建 
    // table未初始化或者长度为0，进行扩容
    if ((tab = table) == null || (n = tab.length) == 0)
        n = (tab = resize()).length;
    // 步骤②：计算index，并对null做处理  
    // (n - 1) &amp; hash 确定元素存放在哪个桶中，桶为空，新生成结点放入桶中(此时，这个结点是放在数组中)
    if ((p = tab[i = (n - 1) &amp; hash]) == null)
        tab[i] = newNode(hash, key, value, null);
    // 桶中已经存在元素
    else {
        Node&lt;K,V&gt; e; K k;
        // 步骤③：节点key存在，直接覆盖value 
        // 比较桶中第一个元素(数组中的结点)的hash值相等，key相等
        if (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != null &amp;&amp; key.equals(k))))
                // 将第一个元素赋值给e，用e来记录
                e = p;
        // 步骤④：判断该链为红黑树 
        // hash值不相等，即key不相等；为红黑树结点
        else if (p instanceof TreeNode)
            // 放入树中
            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);
        // 步骤⑤：该链为链表 
        // 为链表结点
        else {
            // 在链表最末插入结点
            for (int binCount = 0; ; ++binCount) {
                // 到达链表的尾部
                if ((e = p.next) == null) {
                    // 在尾部插入新结点
                    p.next = newNode(hash, key, value, null);
                    // 结点数量达到阈值，转化为红黑树
                    if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st
                        treeifyBin(tab, hash);
                    // 跳出循环
                    break;
                }
                // 判断链表中结点的key值与插入的元素的key值是否相等
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    // 相等，跳出循环
                    break;
                // 用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表
                p = e;
            }
        }
        // 表示在桶中找到key值、hash值与插入元素相等的结点
        if (e != null) { 
            // 记录e的value
            V oldValue = e.value;
            // onlyIfAbsent为false或者旧值为null
            if (!onlyIfAbsent || oldValue == null)
                //用新值替换旧值
                e.value = value;
            // 访问后回调
            afterNodeAccess(e);
            // 返回旧值
            return oldValue;
        }
    }
    // 结构性修改
    ++modCount;
    // 步骤⑥：超过最大容量 就扩容 
    // 实际大小大于阈值则扩容
    if (++size &gt; threshold)
        resize();
    // 插入后回调
    afterNodeInsertion(evict);
    return null;
}
</code></pre>
<h2 id="hashmap的数据存储实现原理">HashMap的数据存储实现原理</h2>
<p>流程：</p>
<ol>
<li>
<p>根据key计算得到key.hash = (h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)；</p>
</li>
<li>
<p>根据key.hash计算得到桶数组的索引index = key.hash &amp; (table.length - 1)，这样就找到该key的存放位置了：</p>
</li>
</ol>
<p>① 如果该位置没有数据，用该数据新生成一个节点保存新数据，返回null；</p>
<p>② 如果该位置有数据是一个红黑树，那么执行相应的插入 / 更新操作；</p>
<p>③ 如果该位置有数据是一个链表，分两种情况一是该链表没有这个节点，另一个是该链表上有这个节点，注意这里判断的依据是key.hash是否一样：</p>
<p>如果该链表没有这个节点，那么采用尾插法新增节点保存新数据，返回null；如果该链表已经有这个节点了，那么找到该节点并更新新数据，返回老数据。</p>
<p>注意：</p>
<p>HashMap的put会返回key的上一次保存的数据，比如：</p>
<p>HashMap&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();<br>
System.out.println(map.put(&quot;a&quot;, &quot;A&quot;)); // 打印null<br>
System.out.println(map.put(&quot;a&quot;, &quot;AA&quot;)); // 打印A<br>
System.out.println(map.put(&quot;a&quot;, &quot;AB&quot;)); // 打印AA</p>
<h2 id="getnode方法">getNode方法</h2>
<pre><code class="language-java">final Node&lt;K,V&gt; getNode(int hash, Object key) {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k;
    // table已经初始化，长度大于0，根据hash寻找table中的项也不为空
    if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp;
        (first = tab[(n - 1) &amp; hash]) != null) {
        // 桶中第一项(数组元素)相等
        if (first.hash == hash &amp;&amp; // always check first node
            ((k = first.key) == key || (key != null &amp;&amp; key.equals(k))))
            return first;
        // 桶中不止一个结点
        if ((e = first.next) != null) {
            // 为红黑树结点
            if (first instanceof TreeNode)
                // 在红黑树中查找
                return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            // 否则，在链表中查找
            do {
                if (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != null &amp;&amp; key.equals(k))))
                    return e;
            } while ((e = e.next) != null);
        }
    }
    return null;
}



本文参考链接：https://www.cnblogs.com/doufuyu/p/10874689.html

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[XMS XMX设置问题]]></title>
        <id>https://zhoujings.github.io/post/xms-xmx-she-zhi-wen-ti/</id>
        <link href="https://zhoujings.github.io/post/xms-xmx-she-zhi-wen-ti/">
        </link>
        <updated>2020-10-17T12:57:59.000Z</updated>
        <content type="html"><![CDATA[<p>-Xms：堆内存的最小内存值，默认为物理内存的1/64<br>
-Xmx：堆内存的最大内存值，默认为物理内存的1/4<br>
堆内存存在动态扩容收缩机制，Xms过小会频繁触发GC操作。GC操作频繁就引起了性能问题。</p>
<p>面对上面的问题，为了避免在生产环境由于heap内存扩大或缩小导致应用停顿，降低延迟，同时避免每次垃圾回收完成后JVM重新分配内存。所以，-Xms一般一开始就设置跟-Xmx一样发小。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾收集算法]]></title>
        <id>https://zhoujings.github.io/post/la-ji-shou-ji-suan-fa/</id>
        <link href="https://zhoujings.github.io/post/la-ji-shou-ji-suan-fa/">
        </link>
        <updated>2020-10-17T11:58:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-引用计数法">1、引用计数法</h2>
<p>给对象添加一个应用计数器，每当应用该对象的时候，计数器就加1，当引用失效时就减1。当计数器为0时表示不再被使用。但是很难解决循环引用的问题。基本没有使用。了解就行了。</p>
<h2 id="2-复制算法">2、复制算法</h2>
<p>复制算法将可用内存分为大小相等的两块内存区域，每次只使用其中一块。当调用复制算法的时候，就会把当前存活的对象复制到另一块区域。然后把当前区域清理掉。这种算法效率高，且不会存在内存碎片。复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。</p>
<h2 id="3-标记-清除算法">3、标记-清除算法</h2>
<p>这种算法就是把当前内存中的不可用对象会挨个标记一遍。然后执行清除操作。这种算法不会浪费空间，但是效率不如复制算法。且会存在内存碎片的问题。</p>
<h2 id="4-标记-整理算法">4、标记-整理算法</h2>
<p>标记整理算法就是在标记清楚算法的基础上加上了整理这一个步骤。把以前内存不连续的对象，整理在一起。就解决了内存碎片的问题。但是相对来说效率就更低了一点。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[方法区元空间永久代常量池]]></title>
        <id>https://zhoujings.github.io/post/fang-fa-qu-yuan-kong-jian-yong-jiu-dai-chang-liang-chi/</id>
        <link href="https://zhoujings.github.io/post/fang-fa-qu-yuan-kong-jian-yong-jiu-dai-chang-liang-chi/">
        </link>
        <updated>2020-10-16T15:25:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="方法区">方法区</h2>
<p>方法区相当于是一个规范一个接口。而永久代与元空间相当于是方法区的实现。</p>
<p>永久代（PermGen）：hotspot实现 1.7 1.6</p>
<p>元空间（MetaSpace）：hotspot实现 1.8</p>
<p>首先，metaspace默认的最大值是整个机器的物理内存大小，所以metaspace不断扩张会导致java程序侵占系统可用内存，最终系统没有可用的内存；而永久区则有固定的默认大小，不会扩张到整个机器的可用内存。当分配的内存耗尽时，两者均会触发full gc，但不同的是永久区在full gc时，以堆内存回收时类似的机制去回收永久区中的类元数据（Class对象），只要是根引用无法到达的对象就可以回收掉，而metaspace判断类元数据是否可以回收，是根据加载这些类元数据的Classloader是否可以回收来判断的，只要Classloader不能回收，通过其加载的类元数据就不会被回收。</p>
<h2 id="常量池">常量池</h2>
<p>1.6  - 永久代（方法区）</p>
<p>1.7、1.8  - 堆</p>
<p>但是即使是同样在堆中：<br>
public class StringConstancePool {<br>
public static void main(String[] args) {<br>
String str1 = new String(&quot;abc&quot;);<br>
String str2 = str1.intern();<br>
System.out.println(str1 == str2);<br>
}<br>
}<br>
以上程序的运行结果仍然是false，这时因为intern生成的str2所引用的字符串内容是在字符串常量池中，而通过new String方法生成的str1，该字符串对象是位于存放对象的Java堆中，二者的地址是不同的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java堆内存heap]]></title>
        <id>https://zhoujings.github.io/post/java-dui-nei-cun-heap/</id>
        <link href="https://zhoujings.github.io/post/java-dui-nei-cun-heap/">
        </link>
        <updated>2020-10-16T15:01:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-概念">1、概念</h2>
<p>堆内存是java虚拟机中重要的组成部分，俗话说 栈管运行 堆管存储。所以我们也知道了堆的作用就是用来存储数据的。我们平时new出来的数据就存在堆中。因为数据会占用内存所以堆内存的优化就很重要。当程序需要申请内存使用的时候，如果堆中内存不足，则会抛出OOM（Out Of Memoy）异常。</p>
<h2 id="2-内存划分">2、内存划分</h2>
<p>1、物理内存分为年轻代和老年代。逻辑层面说多了一个非堆内存元空间存储在内存中不受限于JVM本身分配的内存（JDK1.7 1.6及叫永久代，存储在JVM中）。<br>
2、年轻代又分为Eden（新对象存储区域）和Survivor区。Survivor区由FromSpace和ToSpace组成也叫S0 S1。Eden区占大容量，Survivor两个区占小容量，默认比例是8:1:1<br>
3、元空间是方法区的一种具体实现，里面存放的是被虚拟机加载的类信息、常量、静态变量、动态生成的类等数据。</p>
<h2 id="3-堆的垃圾回收方式">3、堆的垃圾回收方式</h2>
<p>java堆是GC垃圾回收的主要区域。 GC分为两种： Minor GC、Full GC（也叫做Major GC）.</p>
<h2 id="4-minor-gc简称gc">4、Minor GC(简称GC)</h2>
<p>Minor GC是发生在新生代中的垃圾收集动作， 所采用的是复制算法。<br>
GC一般为堆空间某个区发生了垃圾回收，<br>
新生代（Young）几乎是所有java对象出生的地方。即java对象申请的内存以及存放都是在这个地方。java中的大部分对象通常不会长久的存活， 具有朝生夕死的特点。<br>
当一个对象被判定为“死亡”的时候， GC就有责任来回收掉这部分对象的内存空间。<br>
新生代是收集垃圾的频繁区域。</p>
<h2 id="5-回收过程如下">5、回收过程如下：</h2>
<p>当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳(上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。<br>
但这也不是一定的，对于一些较大的对象 ( 即需要分配一块较大的连续内存空间 ) 则是直接进入到老年代。</p>
<h2 id="6-full-gc">6、Full GC</h2>
<p>Full GC 基本都是整个堆空间及持久代发生了垃圾回收，所采用的是标记-清除算法。<br>
现实的生活中，老年代的人通常会比新生代的人 “早死”。堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长，一般是Minor GC的 10倍以上。<br>
另外，标记-清除算法收集垃圾的时候会产生许多的内存碎片 ( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[值传递]]></title>
        <id>https://zhoujings.github.io/post/zhi-chuan-di/</id>
        <link href="https://zhoujings.github.io/post/zhi-chuan-di/">
        </link>
        <updated>2020-10-16T14:27:43.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-概念">1、概念</h2>
<p>程序员们普遍认为，当传的值是基础类型的时候，就是值传递。而当传递的是引用类型的时候，就是引用传递。其实这2种传递都是值传递，只是第二种传递把引用当成了一个值传递了。<br>
所以当传递的是基础类型的时候，这是后就相当于是传递的复印件。并不会改变原始数据。<br>
当传递的值是引用类型的时候，这时候复印的就是引用地址了，因为2个引用指向的是堆中同一块区域，所以任意一方改变值，都会造成数据修改。</p>
<h2 id="2-string类型传递">2、String类型传递</h2>
<p>但是当引用传递为String类型的时候，这就不一样了。<br>
因为String类型存在方法区的常量池中。当要修改值的时候，会判断常量池中是否存在修改的值。如果没有则创建对应的值，并指向该值。但是原来数据还是指向的原始值。所以数据未改变。</p>
<h2 id="2-总结">2、总结</h2>
<p>基础类型传递不会改变原始数据。<br>
引用类型传递会改变原始数据。String类型除外。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类的初始化]]></title>
        <id>https://zhoujings.github.io/post/lei-de-chu-shi-hua/</id>
        <link href="https://zhoujings.github.io/post/lei-de-chu-shi-hua/">
        </link>
        <updated>2020-10-15T13:04:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于初始化">关于初始化</h2>
<p>1、new新对象、读取静态变量、设置静态变量，调用静态函数当执行这些操作的时候如果类未被初始化则必须初始化。<br>
2、使用java.lang.reflect包的方法对类进行发射调用时，如果被调用类未初始化，则需要出初始化。<br>
3、当初始化一个类的时候，则必须先触发父类初始化。</p>
<h2 id="不会初始化的情况">不会初始化的情况</h2>
<p><strong>通过子类来引用父类的静态字段，不会导致子类初始化</strong></p>
<pre><code class="language-java">@SpringBootTest
class ApplicationTests {
        public static void main(String[] args) {
            System.out.println(Student.value);
        }
}
class Person{
    public static int value=123;
    static{
        System.out.println(&quot;Person init!&quot;);
    }
}
class Student extends Person{
    static{
        System.out.println(&quot;Student init!&quot;);
    }
}
</code></pre>
<p>上面代码只会打印Person init。子类并未初始化。<br>
<strong>通过数组定义来引用类，不会触发此类初始化</strong></p>
<pre><code class="language-java">@SpringBootTest
class ApplicationTests {
        public static void main(String[] args) {
            Student[] stus=new Student[10];
            ArrayList list  = new ArrayList&lt;Student&gt;();
        }
}
class Person{
    public static int value=123;
    static{
        System.out.println(&quot;Person init!&quot;);
    }
}
class Student extends Person{
    static{
        System.out.println(&quot;Student init!&quot;);
    }
}
</code></pre>
<p>并没有打印静态代码块，类未初始化。<br>
<strong>调用类的全局常量不会初始化该类</strong></p>
<pre><code class="language-java">@SpringBootTest
class ApplicationTests {
        public  static  void main(String[] args) {
            System.out.println(Student.HELLO_WORLD);
        }
}
class Student{
     final static String HELLO_WORLD=&quot;hello world&quot;;
    static{
        System.out.println(&quot;Student init!&quot;);
    }
}
</code></pre>
<p>只打印hello world。Student类并未初始化。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内存溢出与内存泄露]]></title>
        <id>https://zhoujings.github.io/post/nei-cun-yi-chu-yu-nei-cun-xie-lu/</id>
        <link href="https://zhoujings.github.io/post/nei-cun-yi-chu-yu-nei-cun-xie-lu/">
        </link>
        <updated>2020-10-15T09:19:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-内存溢出">1、内存溢出</h2>
<p>系统无法再分配你所需要的空间。比如一个100毫升的杯子，你往里面加了95毫升的水了。然后你继续往里面加10毫升水，这时水就会溢出杯子。程序中出现这种情况就会造成内存溢出异常。</p>
<h2 id="2-内存泄露">2、内存泄露</h2>
<p>是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光，就造成了内存溢出的情况。</p>
<h2 id="3-内存泄露示例">3、内存泄露示例</h2>
<p>如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露。</p>
<pre><code class="language-base">public class Simple {
    Object object;
    public void method1(){
        object = new Object();
    //...其他代码
        }
    }
    ```
方法执行完后object的对象不会马上被认为是可释放的对象，只有所在类被释放后才会释放，这就是一种内存泄露。
解决方法：1、可以降低object的作用域，在方法内部声明。2、方法执行完后设置对象没null。
通过上面2中方法可以及时的对new Object()对象进行GC回收。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[双亲委派机制与沙箱安全机制]]></title>
        <id>https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/</id>
        <link href="https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/">
        </link>
        <updated>2020-10-13T12:08:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="双亲委派机制">双亲委派机制</h2>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器 （Bootstrap ClassLoader)中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。<br>
　　具体流程：<br>
　　　　1.当AppClassLoader加载一个class时，它不会尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。<br>
　　　　2.当父类ExtClassLoader加载到这个.class时，他也不会尝试加载这个类，而是把类加载请求委派给父类加载器BootstrapClassLoader。<br>
　　　　3.当BootstrapClassLoader加载到这个.class时，它会查找该类是否存在，如果不存在，就往下传递，交给ExtClassLoader，如果ExtClassLoader在自己相应的包中也没找到对应的类，就交给AppClassLoader来加载，如果AppClassLoader也没有，就报ClassNotFoundException();</p>
<h2 id="沙箱安全机制">沙箱安全机制</h2>
<p>比如我定义了一个类名为String所在包为java.lang，因为这个类本来是属于jdk的，如果没有沙箱安全  机制的话，这个类将会污染到我所有的String,但是由于沙箱安全机制，所以就委托顶层的bootstrap加载器查找这个类，如果没有的话就委托extsion,extsion没有就到aapclassloader，但是由于String就是jdk的源代码，所以在bootstrap那里就加载到了，先找到先使用，所以就使用bootstrap里面的String,后面的一概不能使用，这就保证了不被恶意代码污染。</p>
]]></content>
    </entry>
</feed>