<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoujings.github.io</id>
    <title>ZhouJingS的java之旅</title>
    <updated>2020-10-25T14:55:00.517Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoujings.github.io"/>
    <link rel="self" href="https://zhoujings.github.io/atom.xml"/>
    <subtitle>长风破浪会有时，直挂云帆济沧海。</subtitle>
    <logo>https://zhoujings.github.io/images/avatar.png</logo>
    <icon>https://zhoujings.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ZhouJingS的java之旅</rights>
    <entry>
        <title type="html"><![CDATA[Hystrix执行流程图解]]></title>
        <id>https://zhoujings.github.io/post/hystrix-zhi-xing-liu-cheng-tu-jie/</id>
        <link href="https://zhoujings.github.io/post/hystrix-zhi-xing-liu-cheng-tu-jie/">
        </link>
        <updated>2020-10-24T14:57:10.000Z</updated>
        <content type="html"><![CDATA[<figure data-type="image" tabindex="1"><img src="https://zhoujings.github.io/post-images/1603551507929.png" alt="" loading="lazy"></figure>
<h2 id="流程说明">流程说明</h2>
<p>1、每次调用创建一个新的HystrixCommand,把依赖调用封装在run()方法中.<br>
2、执行execute()/queue做同步或异步调用.<br>
3、当前调用是否已被缓存，是则直接返回结果，否则进入步骤 4<br>
4、判断熔断器(circuit-breaker)是否打开,如果打开跳到步骤 8,进行降级策略,如果关闭进入步骤 5<br>
5、判断线程池/队列/信号量是否跑满，如果跑满进入降级步骤8,否则继续后续步骤 6<br>
6、调用HystrixCommand的run方法.运行依赖逻辑<br>
6.1. 调用是否出现异常，否：继续，是进入步骤8，<br>
6.2. 调用是否超时，否：返回调用结果，是进入步骤8<br>
7、搜集5、6步骤所有的运行状态(成功, 失败, 拒绝,超时)上报给熔断器，用于统计从而判断熔断器状态<br>
8、getFallback()降级逻辑.四种触发getFallback调用情况（图中步骤8的箭头来源）：<br>
返回执行成功结果</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hystrix Dashboard问题]]></title>
        <id>https://zhoujings.github.io/post/hystrix-dashboard-wen-ti/</id>
        <link href="https://zhoujings.github.io/post/hystrix-dashboard-wen-ti/">
        </link>
        <updated>2020-10-24T14:51:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="问题">问题</h2>
<p>当访问网站的时候出现Unable to connect to Command Metric Stream问题的时候，需要在被监控服务端启动类上加上如下代码。</p>
<pre><code class="language-java">@Bean
    public ServletRegistrationBean getServlet(){
        HystrixMetricsStreamServlet streamServlet = new HystrixMetricsStreamServlet();
        ServletRegistrationBean registrationBean = new ServletRegistrationBean(streamServlet);
        registrationBean.setLoadOnStartup(1);
        registrationBean.addUrlMappings(&quot;/hystrix.stream&quot;);
        registrationBean.setName(&quot;HystrixMetricsStreamServlet&quot;);
        return registrationBean;
    }</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[索引注意事项]]></title>
        <id>https://zhoujings.github.io/post/suo-yin-zhu-yi-shi-xiang/</id>
        <link href="https://zhoujings.github.io/post/suo-yin-zhu-yi-shi-xiang/">
        </link>
        <updated>2020-10-21T09:40:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="口诀">口诀</h2>
<p>全值匹配我最爱，最左前缀要遵守<br>
带头大哥不能死，中间兄弟不能断<br>
索引列上少计算，范围之后全失效<br>
LIKE符号写最右，覆盖索引不写星<br>
不等空值还有or，索引失效要少用<br>
var引号不能丢，SQL高级也不难<br>
分组之前必排序，一定要上索引啊</p>
<h2 id="注意点">注意点</h2>
<p>建索引注意事项<br>
1、单值索引，尽量选择过滤性更好的字段，例如：性别字段，过滤度为50%，识别率很差，不建议建索引<br>
2、组合索引，索引字段的顺序可以按照识别度进行排序，识别度越高，放在越靠前<br>
3、组合索引，尽量包含where语句中的更多字段<br>
4、尽可能的根据分析执行计划、统计信息，去调整query的写法达到合适索引的目的</p>
<p>索引容易失效的几个注意点<br>
1、不在索引列上做任何的操作（计算、函数、类型转换），会导致索引失效而转向全表扫描<br>
2、组合索引中，如果中间某个字段使用了范围条件，则右边的列索引失效<br>
3、尽量使用覆盖索引（索引列和查询列一致），减少使用select *<br>
4、mysql在使用不等于（！= 或者&lt;&gt;）的时候，无法使用索引列会导致全表扫描<br>
5、is null ，is not null 也无法使用索引<br>
6、like通配符必须放在索引列的右边，否则索引失效，编程全表扫描<br>
7、字符串不加单引号索引失效<br>
8、少用or，用它连接索引会失效，除非都有索引。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Socket通信demo]]></title>
        <id>https://zhoujings.github.io/post/socket-tong-xin-demo/</id>
        <link href="https://zhoujings.github.io/post/socket-tong-xin-demo/">
        </link>
        <updated>2020-10-20T13:14:14.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-java">package com.zhoujs.server;

import org.springframework.boot.test.context.SpringBootTest;
import java.io.*;
import java.net.*;

/**
 * Server*
 * @author zhoujs
 * @description *
 * @create 2020/9/20 21:12
 **/


@SpringBootTest
class Server {
    private static int count;
    private static Socket socket;

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(9527);
        System.out.println(&quot;服务器已启动,等待客户连接...&quot;);
        while(true){
            socket = serverSocket.accept();
            ServerThread st = new ServerThread(socket);
            st.start();
            System.out.println(&quot;这是第&quot;+(count++)+&quot;位用户访问&quot;);
            System.out.println(&quot;此用户的IP地址为&quot;+socket.getInetAddress().getHostAddress());
        }
    }
}


class ServerThread extends Thread {

    private Socket socket = null;
    private InputStream inputStream = null;
    private InputStreamReader inputStreamReader = null;
    private BufferedReader bufferedReader = null;
    private OutputStream outputStream = null;
    private PrintStream printStream = null;
    private String a;
    private String b = &quot;Hello JAVA&quot;;

    public ServerThread(Socket socket) {
        this.socket = socket;
    }
    @Override
    public void run() {
        super.run();
        try {
            inputStream = socket.getInputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        inputStreamReader = new InputStreamReader(inputStream);
        bufferedReader = new BufferedReader(inputStreamReader);
        try {
            while((a = bufferedReader.readLine()) != null){
                System.out.println(&quot;客户端说:&quot;+a);
                socket.shutdownInput();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            outputStream = socket.getOutputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
        printStream = new PrintStream(outputStream);
        try {
            printStream.write(b.getBytes());
            socket.shutdownOutput();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

}




class client{

    private static String info = &quot;Hello World&quot;;
    private static String localhost;
    private static byte[] b;
    private static String a;

    public static void main(String[] args) throws UnknownHostException, IOException {
        Socket socket = new Socket(localhost, 9527);
        OutputStream outputStream = socket.getOutputStream();
        PrintStream ps = new PrintStream(outputStream);
        b = info.getBytes();
        ps.write(b);
        ps.flush();
        //千万不能忘记关闭输入输出流!!否则不会出结果!!
        socket.shutdownOutput();
        InputStream inputStream = socket.getInputStream();
        BufferedReader bf = new BufferedReader(new InputStreamReader(inputStream));
        while((a = bf.readLine()) != null){
            System.out.println(&quot;服务器说:&quot;+a);
        }
        socket.shutdownInput();
        bf.close();
        inputStream.close();
        ps.close();
        outputStream.close();
        socket.close();
    }
}


</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[垃圾收集算法]]></title>
        <id>https://zhoujings.github.io/post/la-ji-shou-ji-suan-fa/</id>
        <link href="https://zhoujings.github.io/post/la-ji-shou-ji-suan-fa/">
        </link>
        <updated>2020-10-17T11:58:22.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-引用计数法">1、引用计数法</h2>
<p>给对象添加一个应用计数器，每当应用该对象的时候，计数器就加1，当引用失效时就减1。当计数器为0时表示不再被使用。但是很难解决循环引用的问题。基本没有使用。了解就行了。</p>
<h2 id="2-复制算法">2、复制算法</h2>
<p>复制算法将可用内存分为大小相等的两块内存区域，每次只使用其中一块。当调用复制算法的时候，就会把当前存活的对象复制到另一块区域。然后把当前区域清理掉。这种算法效率高，且不会存在内存碎片。复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服50%内存的浪费。</p>
<h2 id="3-标记-清除算法">3、标记-清除算法</h2>
<p>这种算法就是把当前内存中的不可用对象会挨个标记一遍。然后执行清除操作。这种算法不会浪费空间，但是效率不如复制算法。且会存在内存碎片的问题。</p>
<h2 id="4-标记-整理算法">4、标记-整理算法</h2>
<p>标记整理算法就是在标记清楚算法的基础上加上了整理这一个步骤。把以前内存不连续的对象，整理在一起。就解决了内存碎片的问题。但是相对来说效率就更低了一点。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[方法区元空间永久代常量池]]></title>
        <id>https://zhoujings.github.io/post/fang-fa-qu-yuan-kong-jian-yong-jiu-dai-chang-liang-chi/</id>
        <link href="https://zhoujings.github.io/post/fang-fa-qu-yuan-kong-jian-yong-jiu-dai-chang-liang-chi/">
        </link>
        <updated>2020-10-16T15:25:41.000Z</updated>
        <content type="html"><![CDATA[<h2 id="方法区">方法区</h2>
<p>方法区相当于是一个规范一个接口。而永久代与元空间相当于是方法区的实现。</p>
<p>永久代（PermGen）：hotspot实现 1.7 1.6</p>
<p>元空间（MetaSpace）：hotspot实现 1.8</p>
<p>首先，metaspace默认的最大值是整个机器的物理内存大小，所以metaspace不断扩张会导致java程序侵占系统可用内存，最终系统没有可用的内存；而永久区则有固定的默认大小，不会扩张到整个机器的可用内存。当分配的内存耗尽时，两者均会触发full gc，但不同的是永久区在full gc时，以堆内存回收时类似的机制去回收永久区中的类元数据（Class对象），只要是根引用无法到达的对象就可以回收掉，而metaspace判断类元数据是否可以回收，是根据加载这些类元数据的Classloader是否可以回收来判断的，只要Classloader不能回收，通过其加载的类元数据就不会被回收。</p>
<h2 id="常量池">常量池</h2>
<p>1.6  - 永久代（方法区）</p>
<p>1.7、1.8  - 堆</p>
<p>但是即使是同样在堆中：<br>
public class StringConstancePool {<br>
public static void main(String[] args) {<br>
String str1 = new String(&quot;abc&quot;);<br>
String str2 = str1.intern();<br>
System.out.println(str1 == str2);<br>
}<br>
}<br>
以上程序的运行结果仍然是false，这时因为intern生成的str2所引用的字符串内容是在字符串常量池中，而通过new String方法生成的str1，该字符串对象是位于存放对象的Java堆中，二者的地址是不同的。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[java堆内存heap]]></title>
        <id>https://zhoujings.github.io/post/java-dui-nei-cun-heap/</id>
        <link href="https://zhoujings.github.io/post/java-dui-nei-cun-heap/">
        </link>
        <updated>2020-10-16T15:01:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-概念">1、概念</h2>
<p>堆内存是java虚拟机中重要的组成部分，俗话说 栈管运行 堆管存储。所以我们也知道了堆的作用就是用来存储数据的。我们平时new出来的数据就存在堆中。因为数据会占用内存所以堆内存的优化就很重要。当程序需要申请内存使用的时候，如果堆中内存不足，则会抛出OOM（Out Of Memoy）异常。</p>
<h2 id="2-内存划分">2、内存划分</h2>
<p>1、物理内存分为年轻代和老年代。逻辑层面说多了一个非堆内存元空间存储在内存中不受限于JVM本身分配的内存（JDK1.7 1.6及叫永久代，存储在JVM中）。<br>
2、年轻代又分为Eden（新对象存储区域）和Survivor区。Survivor区由FromSpace和ToSpace组成也叫S0 S1。Eden区占大容量，Survivor两个区占小容量，默认比例是8:1:1<br>
3、元空间是方法区的一种具体实现，里面存放的是被虚拟机加载的类信息、常量、静态变量、动态生成的类等数据。</p>
<h2 id="3-堆的垃圾回收方式">3、堆的垃圾回收方式</h2>
<p>java堆是GC垃圾回收的主要区域。 GC分为两种： Minor GC、Full GC（也叫做Major GC）.</p>
<h2 id="4-minor-gc简称gc">4、Minor GC(简称GC)</h2>
<p>Minor GC是发生在新生代中的垃圾收集动作， 所采用的是复制算法。<br>
GC一般为堆空间某个区发生了垃圾回收，<br>
新生代（Young）几乎是所有java对象出生的地方。即java对象申请的内存以及存放都是在这个地方。java中的大部分对象通常不会长久的存活， 具有朝生夕死的特点。<br>
当一个对象被判定为“死亡”的时候， GC就有责任来回收掉这部分对象的内存空间。<br>
新生代是收集垃圾的频繁区域。</p>
<h2 id="5-回收过程如下">5、回收过程如下：</h2>
<p>当对象在 Eden ( 包括一个 Survivor 区域，这里假设是 from 区域 ) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳(上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，可以通过参数 -XX:MaxTenuringThreshold 来设定 )，这些对象就会成为老年代。<br>
但这也不是一定的，对于一些较大的对象 ( 即需要分配一块较大的连续内存空间 ) 则是直接进入到老年代。</p>
<h2 id="6-full-gc">6、Full GC</h2>
<p>Full GC 基本都是整个堆空间及持久代发生了垃圾回收，所采用的是标记-清除算法。<br>
现实的生活中，老年代的人通常会比新生代的人 “早死”。堆内存中的老年代(Old)不同于这个，老年代里面的对象几乎个个都是在 Survivor 区域中熬过来的，它们是不会那么容易就 “死掉” 了的。因此，Full GC 发生的次数不会有 Minor GC 那么频繁，并且做一次 Full GC 要比进行一次 Minor GC 的时间更长，一般是Minor GC的 10倍以上。<br>
另外，标记-清除算法收集垃圾的时候会产生许多的内存碎片 ( 即不连续的内存空间 )，此后需要为较大的对象分配内存空间时，若无法找到足够的连续的内存空间，就会提前触发一次 GC 的收集动作</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内存溢出与内存泄露]]></title>
        <id>https://zhoujings.github.io/post/nei-cun-yi-chu-yu-nei-cun-xie-lu/</id>
        <link href="https://zhoujings.github.io/post/nei-cun-yi-chu-yu-nei-cun-xie-lu/">
        </link>
        <updated>2020-10-15T09:19:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-内存溢出">1、内存溢出</h2>
<p>系统无法再分配你所需要的空间。比如一个100毫升的杯子，你往里面加了95毫升的水了。然后你继续往里面加10毫升水，这时水就会溢出杯子。程序中出现这种情况就会造成内存溢出异常。</p>
<h2 id="2-内存泄露">2、内存泄露</h2>
<p>是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光，就造成了内存溢出的情况。</p>
<h2 id="3-内存泄露示例">3、内存泄露示例</h2>
<p>如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露。</p>
<pre><code class="language-base">public class Simple {
    Object object;
    public void method1(){
        object = new Object();
    //...其他代码
        }
    }
    ```
方法执行完后object的对象不会马上被认为是可释放的对象，只有所在类被释放后才会释放，这就是一种内存泄露。
解决方法：1、可以降低object的作用域，在方法内部声明。2、方法执行完后设置对象没null。
通过上面2中方法可以及时的对new Object()对象进行GC回收。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[双亲委派机制与沙箱安全机制]]></title>
        <id>https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/</id>
        <link href="https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/">
        </link>
        <updated>2020-10-13T12:08:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="双亲委派机制">双亲委派机制</h2>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器 （Bootstrap ClassLoader)中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。<br>
　　具体流程：<br>
　　　　1.当AppClassLoader加载一个class时，它不会尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。<br>
　　　　2.当父类ExtClassLoader加载到这个.class时，他也不会尝试加载这个类，而是把类加载请求委派给父类加载器BootstrapClassLoader。<br>
　　　　3.当BootstrapClassLoader加载到这个.class时，它会查找该类是否存在，如果不存在，就往下传递，交给ExtClassLoader，如果ExtClassLoader在自己相应的包中也没找到对应的类，就交给AppClassLoader来加载，如果AppClassLoader也没有，就报ClassNotFoundException();</p>
<h2 id="沙箱安全机制">沙箱安全机制</h2>
<p>比如我定义了一个类名为String所在包为java.lang，因为这个类本来是属于jdk的，如果没有沙箱安全  机制的话，这个类将会污染到我所有的String,但是由于沙箱安全机制，所以就委托顶层的bootstrap加载器查找这个类，如果没有的话就委托extsion,extsion没有就到aapclassloader，但是由于String就是jdk的源代码，所以在bootstrap那里就加载到了，先找到先使用，所以就使用bootstrap里面的String,后面的一概不能使用，这就保证了不被恶意代码污染。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类装载器 ClassLoader]]></title>
        <id>https://zhoujings.github.io/post/lei-zhuang-zai-qi-classloader/</id>
        <link href="https://zhoujings.github.io/post/lei-zhuang-zai-qi-classloader/">
        </link>
        <updated>2020-10-13T11:40:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-描述">1、描述</h2>
<pre><code>    类装载器负责装在.class文件，class文件在文件开头有特定的文件标识（cafe babe）  来标 识这是一个java的class文件。将.class文件加载到内存中，将其放在运行时数据区（Runtime   
 Data Area）的&lt;b&gt;方法区&lt;/b&gt;（放类的描述信息）内。然后在堆区创建一个java.lang.Class
 对象，用来封装类在方法区内的数据结构，ClassLoader只负责class文件的加载。至于它是否可运行交给Execution Engine（执行引擎）来决定。
</code></pre>
<h2 id="2-分类">2、分类</h2>
<pre><code>    ClassLoader一共有3+1个。有3个是java自带的。1是你可以自定义的。  
    启动类加载器（Bootstrap ClassLoader）：又叫根加载器，用C++语言编写，加载rt.jar中的类。
</code></pre>
<p>（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。<br>
扩展类加载器（Extension ClassLoader）：由java语言编写。用来加载java历史长河中各种扩展的技术类。它负责加载JDK\jre\lib\ext目录下的（如javax.*开头的类）。<br>
应用程序类加载器（Application ClassLoader）：如果用户没有自定义类加载器，则我们所写的类均被应用程序类加载器加载。<br>
以上3个类加载器从上到下子父级依次递减。爷爷 爸爸 儿子</p>
<h2 id="3-加载顺序">3、加载顺序</h2>
<figure data-type="image" tabindex="1"><img src="https://zhoujings.github.io/post-images/1602590748191.png" alt="" loading="lazy"></figure>
<p>例如当我们要使用某个类的时候，顺序是这样的，首先先去启动类加载器bootstrap找，如果有就直接用如果没有就去扩展类加载器找，如果扩展类加载器没有，就去应用程序加载器找，如果还是没有，就报ClassNotFoundException异常。</p>
]]></content>
    </entry>
</feed>