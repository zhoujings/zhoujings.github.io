<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoujings.github.io</id>
    <title>ZhouJingS的java之旅</title>
    <updated>2020-10-15T13:31:46.342Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoujings.github.io"/>
    <link rel="self" href="https://zhoujings.github.io/atom.xml"/>
    <subtitle>学无止境</subtitle>
    <logo>https://zhoujings.github.io/images/avatar.png</logo>
    <icon>https://zhoujings.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ZhouJingS的java之旅</rights>
    <entry>
        <title type="html"><![CDATA[类的初始化]]></title>
        <id>https://zhoujings.github.io/post/lei-de-chu-shi-hua/</id>
        <link href="https://zhoujings.github.io/post/lei-de-chu-shi-hua/">
        </link>
        <updated>2020-10-15T13:04:56.000Z</updated>
        <content type="html"><![CDATA[<h2 id="关于初始化">关于初始化</h2>
<p>1、new新对象、读取静态变量、设置静态变量，调用静态函数当执行这些操作的时候如果类未被初始化则必须初始化。<br>
2、使用java.lang.reflect包的方法对类进行发射调用时，如果被调用类未初始化，则需要出初始化。<br>
3、当初始化一个类的时候，则必须先触发父类初始化。</p>
<h2 id="不会初始化的情况">不会初始化的情况</h2>
<p>**通过子类来引用父类的静态字段，不会导致子类初始化 **</p>
<pre><code class="language-base">@SpringBootTest
class ApplicationTests {
        public static void main(String[] args) {
            System.out.println(Student.value);
        }
}
class Person{
    public static int value=123;
    static{
        System.out.println(&quot;Person init!&quot;);
    }
}
class Student extends Person{
    static{
        System.out.println(&quot;Student init!&quot;);
    }
}
</code></pre>
<p>上面代码只会打印Person init。子类并未初始化。<br>
<strong>通过数组定义来引用类，不会触发此类初始化</strong></p>
<pre><code class="language-base">@SpringBootTest
class ApplicationTests {
        public static void main(String[] args) {
            Student[] stus=new Student[10];
            ArrayList list  = new ArrayList&lt;Student&gt;();
        }
}
class Person{
    public static int value=123;
    static{
        System.out.println(&quot;Person init!&quot;);
    }
}
class Student extends Person{
    static{
        System.out.println(&quot;Student init!&quot;);
    }
}
</code></pre>
<p>并没有打印静态代码块，类未初始化。<br>
<strong>调用类的全局常量不会初始化该类</strong></p>
<pre><code class="language-java">@SpringBootTest
class ApplicationTests {
        public  static  void main(String[] args) {
            System.out.println(Student.HELLO_WORLD);
        }
}
class Student{
     final static String HELLO_WORLD=&quot;hello world&quot;;
    static{
        System.out.println(&quot;Student init!&quot;);
    }
}
</code></pre>
<p>只打印hello world。Student类并未初始化。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内存溢出与内存泄露]]></title>
        <id>https://zhoujings.github.io/post/nei-cun-yi-chu-yu-nei-cun-xie-lu/</id>
        <link href="https://zhoujings.github.io/post/nei-cun-yi-chu-yu-nei-cun-xie-lu/">
        </link>
        <updated>2020-10-15T09:19:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-内存溢出">1、内存溢出</h2>
<p>系统无法再分配你所需要的空间。比如一个100毫升的杯子，你往里面加了95毫升的水了。然后你继续往里面加10毫升水，这时水就会溢出杯子。程序中出现这种情况就会造成内存溢出异常。</p>
<h2 id="2-内存泄露">2、内存泄露</h2>
<p>是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存,迟早会被占光，就造成了内存溢出的情况。</p>
<h2 id="3-内存泄露示例">3、内存泄露示例</h2>
<p>如果长生命周期的对象持有短生命周期的引用，就很可能会出现内存泄露。</p>
<pre><code class="language-base">public class Simple {
    Object object;
    public void method1(){
        object = new Object();
    //...其他代码
        }
    }
    ```
方法执行完后object的对象不会马上被认为是可释放的对象，只有所在类被释放后才会释放，这就是一种内存泄露。
解决方法：1、可以降低object的作用域，在方法内部声明。2、方法执行完后设置对象没null。
通过上面2中方法可以及时的对new Object()对象进行GC回收。
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[双亲委派机制与沙箱安全机制]]></title>
        <id>https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/</id>
        <link href="https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/">
        </link>
        <updated>2020-10-13T12:08:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="双亲委派机制">双亲委派机制</h2>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器 （Bootstrap ClassLoader)中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。<br>
　　具体流程：<br>
　　　　1.当AppClassLoader加载一个class时，它不会尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。<br>
　　　　2.当父类ExtClassLoader加载到这个.class时，他也不会尝试加载这个类，而是把类加载请求委派给父类加载器BootstrapClassLoader。<br>
　　　　3.当BootstrapClassLoader加载到这个.class时，它会查找该类是否存在，如果不存在，就往下传递，交给ExtClassLoader，如果ExtClassLoader在自己相应的包中也没找到对应的类，就交给AppClassLoader来加载，如果AppClassLoader也没有，就报ClassNotFoundException();</p>
<h2 id="沙箱安全机制">沙箱安全机制</h2>
<p>比如我定义了一个类名为String所在包为java.lang，因为这个类本来是属于jdk的，如果没有沙箱安全  机制的话，这个类将会污染到我所有的String,但是由于沙箱安全机制，所以就委托顶层的bootstrap加载器查找这个类，如果没有的话就委托extsion,extsion没有就到aapclassloader，但是由于String就是jdk的源代码，所以在bootstrap那里就加载到了，先找到先使用，所以就使用bootstrap里面的String,后面的一概不能使用，这就保证了不被恶意代码污染。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类装载器 ClassLoader]]></title>
        <id>https://zhoujings.github.io/post/lei-zhuang-zai-qi-classloader/</id>
        <link href="https://zhoujings.github.io/post/lei-zhuang-zai-qi-classloader/">
        </link>
        <updated>2020-10-13T11:40:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-描述">1、描述</h2>
<pre><code>    类装载器负责装在.class文件，class文件在文件开头有特定的文件标识（cafe babe）  来标 识这是一个java的class文件。将.class文件加载到内存中，将其放在运行时数据区（Runtime   
 Data Area）的&lt;b&gt;方法区&lt;/b&gt;（放类的描述信息）内。然后在堆区创建一个java.lang.Class
 对象，用来封装类在方法区内的数据结构，ClassLoader只负责class文件的加载。至于它是否可运行交给Execution Engine（执行引擎）来决定。
</code></pre>
<h2 id="2-分类">2、分类</h2>
<pre><code>    ClassLoader一共有3+1个。有3个是java自带的。1是你可以自定义的。  
    启动类加载器（Bootstrap ClassLoader）：又叫根加载器，用C++语言编写，加载rt.jar中的类。
</code></pre>
<p>（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。<br>
扩展类加载器（Extension ClassLoader）：由java语言编写。用来加载java历史长河中各种扩展的技术类。它负责加载JDK\jre\lib\ext目录下的（如javax.*开头的类）。<br>
应用程序类加载器（Application ClassLoader）：如果用户没有自定义类加载器，则我们所写的类均被应用程序类加载器加载。<br>
以上3个类加载器从上到下子父级依次递减。爷爷 爸爸 儿子</p>
<h2 id="3-加载顺序">3、加载顺序</h2>
<figure data-type="image" tabindex="1"><img src="https://zhoujings.github.io/post-images/1602590748191.png" alt="" loading="lazy"></figure>
<p>例如当我们要使用某个类的时候，顺序是这样的，首先先去启动类加载器bootstrap找，如果有就直接用如果没有就去扩展类加载器找，如果扩展类加载器没有，就去应用程序加载器找，如果还是没有，就报ClassNotFoundException异常。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[项目管理者创建git项目流程（IDEA）]]></title>
        <id>https://zhoujings.github.io/post/xiang-mu-guan-li-zhe-chuang-jian-git-xiang-mu-liu-cheng-idea/</id>
        <link href="https://zhoujings.github.io/post/xiang-mu-guan-li-zhe-chuang-jian-git-xiang-mu-liu-cheng-idea/">
        </link>
        <updated>2020-10-13T10:00:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-搭建项目">1、搭建项目</h2>
<p>构建好自己的JAVA项目。</p>
<h2 id="2-添加gitignore文件">2、添加.gitignore文件</h2>
<p>添加git需要忽略的文件名称 具体内容根据实际情况填写。<br>
<img src="https://zhoujings.github.io/post-images/1602583593353.png" alt="" loading="lazy"></p>
<h2 id="3-创建本地仓库">3、创建本地仓库</h2>
<p>IDEA工具栏上点击 VCS —&gt;import into Vsersion Control —&gt;create Git Repository...<br>
<img src="https://zhoujings.github.io/post-images/1602583856141.jpg" alt="" loading="lazy"></p>
<h2 id="4-创建远程私有仓库">4、创建远程私有仓库</h2>
<p>因为我们的项目肯定是公司私有的，所以必须创建为私有项目。<br>
码云还是github或者是公司自己搭建的。</p>
<h2 id="5-dev分支">5、dev分支</h2>
<p>创建dev开发分支，名称自己定。不要再master分支上开发。</p>
<h2 id="6-提交代码">6、提交代码</h2>
<p>主分支与开发分支的代码 commit到本地仓库然后push到远程仓库。</p>
<h2 id="7-拉取开发人员">7、拉取开发人员</h2>
<p>将小组开发人员拉取到git项目中，因为项目是私有的别人没办法访问。</p>
<h2 id="8-设置master分支为保护分支">8、设置master分支为保护分支</h2>
<p>将master分支设置为保护分支，只有管理员才有权限对master分支进行操作合并。</p>
<p>以上没有截图是因为每个公司用的不一样，具体操作根据自己所使用的git托管平台而定。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用Git命令清单]]></title>
        <id>https://zhoujings.github.io/post/chang-yong-git-ming-ling-qing-dan/</id>
        <link href="https://zhoujings.github.io/post/chang-yong-git-ming-ling-qing-dan/">
        </link>
        <updated>2020-08-24T01:26:31.000Z</updated>
        <content type="html"><![CDATA[<h1 id="常用-git-命令清单">常用 Git 命令清单</h1>
<p><img src="https://zhoujings.github.io/post-images/1602638893920.png" alt="" loading="lazy"><br>
常用 Git 命令清单。几个专用名词的译名如下。</p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h2 id="一-新建代码库">一、新建代码库</h2>
<pre><code class="language-bash"># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre>
<h2 id="二-配置">二、配置</h2>
<p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<pre><code class="language-bash"># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name &quot;[name]&quot;
$ git config [--global] user.email &quot;[email address]&quot;
</code></pre>
<h2 id="三-增加删除文件">三、增加/删除文件</h2>
<pre><code class="language-bash"># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre>
<h2 id="四-代码提交">四、代码提交</h2>
<pre><code class="language-bash"># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre>
<h2 id="五-分支">五、分支</h2>
<pre><code class="language-bash"># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre>
<h2 id="六-标签">六、标签</h2>
<pre><code class="language-bash"># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre>
<h2 id="七-查看信息">七、查看信息</h2>
<pre><code class="language-bash"># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat &quot;@{0 day ago}&quot;

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre>
<h2 id="八-远程同步">八、远程同步</h2>
<pre><code class="language-bash"># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre>
<h2 id="九-撤销">九、撤销</h2>
<pre><code class="language-bash"># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre>
<h2 id="十-其他">十、其他</h2>
<pre><code class="language-bash"># 生成一个可供发布的压缩包
$ git archive
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot项目中添加redis]]></title>
        <id>https://zhoujings.github.io/post/test/</id>
        <link href="https://zhoujings.github.io/post/test/">
        </link>
        <updated>2020-08-13T10:04:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-在pom文件中添加依赖">1、在pom文件中添加依赖</h2>
<pre><code class="language-bash">&lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre>
<h2 id="2-配置redis">2、配置redis</h2>
<pre><code class="language-bash">spring:
  redis:
    host: 127.0.0.1
    port: 6379
</code></pre>
<h2 id="3-添加redis配置类">3、添加redis配置类</h2>
<pre><code class="language-bash">package com.zhoujs.redis.config;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import java.net.UnknownHostException;
/**
 * @author zhoujs
 * @create 2020/9/21 17:39
 **/
@Configuration
public class RedisConfig {
    @Bean
    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException {
        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate();
        template.setConnectionFactory(redisConnectionFactory);
        Jackson2JsonRedisSerializer Jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper om  = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);
        Jackson2JsonRedisSerializer.setObjectMapper(om);
        //String序列化
        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();
        //key采用String的序列化方式
        template.setKeySerializer(stringRedisSerializer);
        template.setHashKeySerializer(stringRedisSerializer);
        template.setValueSerializer(Jackson2JsonRedisSerializer);
        template.setHashValueSerializer(Jackson2JsonRedisSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDEA push 代码被拒绝解决方案]]></title>
        <id>https://zhoujings.github.io/post/sm3-yu-md5-jia-mi-qu-bie/</id>
        <link href="https://zhoujings.github.io/post/sm3-yu-md5-jia-mi-qu-bie/">
        </link>
        <updated>2020-08-12T06:41:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="步骤1">步骤1</h2>
<p>在文件夹中打开git命令框</p>
<h2 id="步骤2">步骤2</h2>
<p>执行git pull origin master --allow-unrelated-histories 命令</p>
]]></content>
    </entry>
</feed>