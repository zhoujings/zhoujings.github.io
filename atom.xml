<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhoujings.github.io</id>
    <title>ZhouJingS的java之旅</title>
    <updated>2020-10-13T12:09:56.637Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhoujings.github.io"/>
    <link rel="self" href="https://zhoujings.github.io/atom.xml"/>
    <subtitle>学无止境</subtitle>
    <logo>https://zhoujings.github.io/images/avatar.png</logo>
    <icon>https://zhoujings.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, ZhouJingS的java之旅</rights>
    <entry>
        <title type="html"><![CDATA[双亲委派机制与沙箱安全机制]]></title>
        <id>https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/</id>
        <link href="https://zhoujings.github.io/post/shuang-qin-wei-pai-ji-zhi-yu-sha-xiang-an-quan-ji-zhi/">
        </link>
        <updated>2020-10-13T12:08:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="双亲委派机制">双亲委派机制</h2>
<p>如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上，因此，所有的类加载请求最终都应该被传递到顶层的启动类加载器（Bootstrap ClassLoader)中，只有当父加载器在它的搜索范围中没有找到所需的类时，即无法完成该加载，子加载器才会尝试自己去加载该类。</p>
<p>具体流程：<br>
　　　　1.当AppClassLoader加载一个class时，它不会尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。<br>
　　　　2.当父类ExtClassLoader加载到这个.class时，他也不会尝试加载这个类，而是把类加载请求委派给父类加载器BootstrapClassLoader。<br>
　　　　3.当BootstrapClassLoader加载到这个.class时，它会查找该类是否存在，如果不存在，就往下传递，交给ExtClassLoader，如果ExtClassLoader在自己相应的包中也没找到对应的类，就交给AppClassLoader来加载，如果AppClassLoader也没有，就报ClassNotFoundException();</p>
<h2 id="沙箱安全机制">沙箱安全机制</h2>
<pre><code>    比如我定义了一个类名为String所在包为java.lang，因为这个类本来是属于jdk的，如果没有沙箱安全机制的话，这个类将会污染到我所有的String,但是由于沙箱安全机制，所以就委托顶层的bootstrap加载器查找这个类，如果没有的话就委托extsion,extsion没有就到aapclassloader，但是由于String就是jdk的源代码，所以在bootstrap那里就加载到了，先找到先使用，所以就使用bootstrap里面的String,后面的一概不能使用，这就保证了不被恶意代码污染。</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[类装载器 ClassLoader]]></title>
        <id>https://zhoujings.github.io/post/lei-zhuang-zai-qi-classloader/</id>
        <link href="https://zhoujings.github.io/post/lei-zhuang-zai-qi-classloader/">
        </link>
        <updated>2020-10-13T11:40:00.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-描述">1、描述</h2>
<pre><code>    类装载器负责装在.class文件，class文件在文件开头有特定的文件标识（cafe babe）来标识这是一个java的class文件。将.class文件加载到内存中，将其放在运行时数据区（Runtime Data Area）的&lt;b&gt;方法区&lt;/b&gt;（放类的描述信息）内。然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构，ClassLoader只负责class文件的加载。至于它是否可运行交给Execution Engine（执行引擎）来决定。
</code></pre>
<h2 id="2-分类">2、分类</h2>
<pre><code>    ClassLoader一共有3+1个。有3个是java自带的。1是你可以自定义的。

    启动类加载器（Bootstrap ClassLoader）：又叫根加载器，用C++语言编写，加载rt.jar中的类。
</code></pre>
<p>（如rt.jar，所有的java.*开头的类均被Bootstrap ClassLoader加载）。<br>
扩展类加载器（Extension ClassLoader）：由java语言编写。用来加载java历史长河中各种扩展的技术类。它负责加载JDK\jre\lib\ext目录下的（如javax.*开头的类）。<br>
应用程序类加载器（Application ClassLoader）：如果用户没有自定义类加载器，则我们所写的类均被应用程序类加载器加载。<br>
以上3个类加载器从上到下子父级依次递减。爷爷 爸爸 儿子</p>
<h2 id="3-加载顺序">3、加载顺序</h2>
<figure data-type="image" tabindex="1"><img src="https://zhoujings.github.io/post-images/1602590748191.png" alt="" loading="lazy"></figure>
<p>例如当我们要使用某个类的时候，顺序是这样的，首先先去启动类加载器bootstrap找，如果有就直接用，如果没有就去扩展类加载器找，如果扩展类加载器没有，就去应用程序加载器找，如果还是没有，就报ClassNotFoundException异常。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[项目管理者创建git项目流程（IDEA）]]></title>
        <id>https://zhoujings.github.io/post/xiang-mu-guan-li-zhe-chuang-jian-git-xiang-mu-liu-cheng-idea/</id>
        <link href="https://zhoujings.github.io/post/xiang-mu-guan-li-zhe-chuang-jian-git-xiang-mu-liu-cheng-idea/">
        </link>
        <updated>2020-10-13T10:00:51.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-搭建项目">1、搭建项目</h2>
<p>构建好自己的JAVA项目。</p>
<h2 id="2-添加gitignore文件">2、添加.gitignore文件</h2>
<p>添加git需要忽略的文件名称 具体内容根据实际情况填写。<br>
<img src="https://zhoujings.github.io/post-images/1602583593353.png" alt="" loading="lazy"></p>
<h2 id="3-创建本地仓库">3、创建本地仓库</h2>
<p>IDEA工具栏上点击 VCS —&gt;import into Vsersion Control —&gt;create Git Repository...<br>
<img src="https://zhoujings.github.io/post-images/1602583856141.jpg" alt="" loading="lazy"></p>
<h2 id="4-创建远程私有仓库">4、创建远程私有仓库</h2>
<p>因为我们的项目肯定是公司私有的，所以必须创建为私有项目。<br>
码云还是github或者是公司自己搭建的。</p>
<h2 id="5-dev分支">5、dev分支</h2>
<p>创建dev开发分支，名称自己定。不要再master分支上开发。</p>
<h2 id="6-提交代码">6、提交代码</h2>
<p>主分支与开发分支的代码 commit到本地仓库然后push到远程仓库。</p>
<h2 id="7-拉取开发人员">7、拉取开发人员</h2>
<p>将小组开发人员拉取到git项目中，因为项目是私有的别人没办法访问。</p>
<h2 id="8-设置master分支为保护分支">8、设置master分支为保护分支</h2>
<p>将master分支设置为保护分支，只有管理员才有权限对master分支进行操作合并。</p>
<p>以上没有截图是因为每个公司用的不一样，具体操作根据自己所使用的git托管平台而定。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[springboot项目中添加redis]]></title>
        <id>https://zhoujings.github.io/post/test/</id>
        <link href="https://zhoujings.github.io/post/test/">
        </link>
        <updated>2020-08-13T10:04:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-在pom文件中添加依赖">1、在pom文件中添加依赖</h2>
<pre><code class="language-bash">&lt;dependency&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;
        &lt;/dependency&gt;
</code></pre>
<h2 id="2-配置reids">2、配置reids</h2>
<pre><code class="language-bash">spring:
  redis:
    host: 127.0.0.1
    port: 6379
</code></pre>
<h2 id="3-添加redis配置类">3、添加redis配置类</h2>
<pre><code class="language-bash">package com.zhoujs.redis.config;
import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.PropertyAccessor;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;
import java.net.UnknownHostException;
/**
 * @author zhoujs
 * @create 2020/9/21 17:39
 **/
@Configuration
public class RedisConfig {
    @Bean
    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory redisConnectionFactory) throws UnknownHostException {
        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate();
        template.setConnectionFactory(redisConnectionFactory);
        Jackson2JsonRedisSerializer Jackson2JsonRedisSerializer = new Jackson2JsonRedisSerializer(Object.class);
        ObjectMapper om  = new ObjectMapper();
        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);
        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance, ObjectMapper.DefaultTyping.NON_FINAL);
        Jackson2JsonRedisSerializer.setObjectMapper(om);
        //String序列化
        StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();
        //key采用String的序列化方式
        template.setKeySerializer(stringRedisSerializer);
        template.setHashKeySerializer(stringRedisSerializer);
        template.setValueSerializer(Jackson2JsonRedisSerializer);
        template.setHashValueSerializer(Jackson2JsonRedisSerializer);
        template.afterPropertiesSet();
        return template;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[IDEA push 代码被拒绝解决方案]]></title>
        <id>https://zhoujings.github.io/post/sm3-yu-md5-jia-mi-qu-bie/</id>
        <link href="https://zhoujings.github.io/post/sm3-yu-md5-jia-mi-qu-bie/">
        </link>
        <updated>2020-08-12T06:41:17.000Z</updated>
        <content type="html"><![CDATA[<h2 id="步骤1">步骤1</h2>
<p>在文件夹中打开git命令框</p>
<h2 id="步骤2">步骤2</h2>
<p>执行git pull origin master --allow-unrelated-histories 命令</p>
]]></content>
    </entry>
</feed>